<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 写入 自己 dao 里的接口名称-->
<mapper namespace="com.nsu.stu.meet.dao.ArticleMapper">

    <resultMap id="articleMap" type="com.nsu.stu.meet.model.dto.ArticleDto">
        <id column="article_id" property="articleId" jdbcType="BIGINT" />
        <result column="parent_id" property="parentId" />
        <result column="parent_user_id" property="parentUserId" />
        <result column="parent_user_nickname" property="parentUserNickname" />
        <result column="content" property="content" jdbcType="VARCHAR" />
        <result column="pic_urls" property="picUrls" />
        <result column="gmt_create" property="gmtCreate" />
        <result column="repost_sum" property="repostSum" jdbcType="VARCHAR" />
        <result column="like_sum" property="likeSum" jdbcType="INTEGER" />
        <result column="dislike_sum" property="dislikeSum" jdbcType="INTEGER" />
        <result column="star_sum" property="starSum" jdbcType="BIGINT" />
        <association property="userDto" javaType="com.nsu.stu.meet.model.dto.UserDto">
            <result property="avatar"  column="avatar" />
            <result property="userId"  column="user_id" />
            <result property="nickname"  column="nickname" />
        </association>
        <association property="articleStatusDto" javaType="com.nsu.stu.meet.model.dto.ArticleStatusDto">
            <result property="likeStatus"  column="like_status" />
            <result property="dislikeStatus"  column="dislike_status" />
            <result property="repostStatus"  column="repost_status" />
            <result property="starStatus"  column="star_status" />
        </association>
    </resultMap>
    <select id="selectArticleByUserIdList" resultMap="articleMap">
        <bind name="block" value="@com.nsu.stu.meet.model.enums.RelationEnums@BLOCK.value"/>
        SELECT
        ma.* ,
        mu.avatar,
        mu.user_id,
        mu.nickname,
        ma2.content parent_content,
        SUM( CASE WHEN mas.like_status = 1 THEN 1 ELSE 0 END ) AS like_sum,
        SUM( CASE WHEN mas.dislike_status = 1 THEN 1 ELSE 0 END ) AS dislike_sum,
        SUM( CASE WHEN mas.star_status = 1 THEN 1 ELSE 0 END ) AS star_sum,
        SUM( CASE WHEN mas.repost_status = 1 THEN 1 ELSE 0 END ) AS repost_sum,
        mas2.like_status, mas2.dislike_status, mas2.repost_status, mas2.star_status
        FROM
        mt_article ma
        LEFT JOIN mt_article ma2 ON ma2.article_id = ma.parent_id
        LEFT JOIN mt_article_status mas ON mas.article_id = ma.article_id
        LEFT JOIN mt_article_status mas2 ON mas2.article_id = ma.article_id
        AND mas2.user_id = #{userId}
        LEFT JOIN mt_user mu ON mu.user_id = ma.user_id
        WHERE
        ma.is_deleted = ${NOT_DELETED}
        <choose>
            <when test="queryIdList.size > 0">
                AND ma.user_id IN
                <foreach collection="queryIdList" item="id" open="(" close=")" separator=",">
                    #{id}
                </foreach>
            </when>
            <otherwise>
                AND 1 = 0
            </otherwise>
        </choose>
        AND ma.limit_id IN (
        SELECT
        mrl.limit_id
        FROM
        mt_relation_limit mrl
        WHERE
        is_deleted = 0
        AND `relation_status` IN (
        SELECT
        `status`
        FROM
        mt_user_relation
        WHERE
        ( SELECT `status` FROM `mt_user_relation` WHERE src_id = ma.user_id AND dest_id = #{userId} ) <![CDATA[ <> ]]> #{block}
        AND src_id = #{userId}
        AND dest_id = ma.user_id
        )
        OR ma.user_id = #{userId}
        )
        GROUP BY
        ma.article_id
        ORDER BY
        ma.gmt_create DESC
        LIMIT #{start}, #{end}
    </select>

    <select id="selectArticleListLatest" resultMap="articleMap">
        <bind name="block" value="@com.nsu.stu.meet.model.enums.RelationEnums@BLOCK.value"/>
        SELECT
        ma.* ,
        mu.avatar,
        mu.user_id,
        mu.nickname,
        ma2.content parent_content,
        SUM( CASE WHEN mas.like_status = 1 THEN 1 ELSE 0 END ) AS like_sum,
        SUM( CASE WHEN mas.dislike_status = 1 THEN 1 ELSE 0 END ) AS dislike_sum,
        SUM( CASE WHEN mas.star_status = 1 THEN 1 ELSE 0 END ) AS star_sum,
        SUM( CASE WHEN mas.repost_status = 1 THEN 1 ELSE 0 END ) AS repost_sum,
        mas2.like_status, mas2.dislike_status, mas2.repost_status, mas2.star_status
        FROM
        mt_article ma
        LEFT JOIN mt_article ma2 ON ma2.article_id = ma.parent_id
        LEFT JOIN mt_article_status mas ON mas.article_id = ma.article_id
        LEFT JOIN mt_article_status mas2 ON mas2.article_id = ma.article_id
        AND mas2.user_id = #{userId}
        LEFT JOIN mt_user mu ON mu.user_id = ma.user_id
        WHERE
        ma.is_deleted = ${NOT_DELETED}
        AND ma.limit_id IN (
        SELECT
        mrl.limit_id
        FROM
        mt_relation_limit mrl
        WHERE
        is_deleted = 0
        AND `relation_status` IN (
        SELECT
        `status`
        FROM
        mt_user_relation
        WHERE
        ( SELECT `status` FROM `mt_user_relation` WHERE src_id = ma.user_id AND dest_id = #{userId} ) <![CDATA[ <> ]]> #{block}
        AND src_id = #{userId}
        AND dest_id = ma.user_id
        )
        OR ma.user_id = #{userId}
        )
        GROUP BY
        ma.article_id
        ORDER BY
        ma.gmt_create DESC
        LIMIT #{start}, #{end}
    </select>
    <select id="selectArticleListHot" resultMap="articleMap">
        <bind name="block" value="@com.nsu.stu.meet.model.enums.RelationEnums@BLOCK.value"/>
        SELECT
        ma.* ,
        mu.avatar,
        mu.user_id,
        mu.nickname,
        ma2.content parent_content,
        SUM( CASE WHEN mas.like_status = 1 THEN 1 ELSE 0 END ) AS like_sum,
        SUM( CASE WHEN mas.dislike_status = 1 THEN 1 ELSE 0 END ) AS dislike_sum,
        SUM( CASE WHEN mas.star_status = 1 THEN 1 ELSE 0 END ) AS star_sum,
        SUM( CASE WHEN mas.repost_status = 1 THEN 1 ELSE 0 END ) AS repost_sum,
        mas2.like_status, mas2.dislike_status, mas2.repost_status, mas2.star_status
        FROM
        mt_article ma
        LEFT JOIN mt_article ma2 ON ma2.article_id = ma.parent_id
        LEFT JOIN mt_article_status mas ON mas.article_id = ma.article_id
        LEFT JOIN mt_article_status mas2 ON mas2.article_id = ma.article_id
        AND mas2.user_id = #{userId}
        LEFT JOIN mt_user mu ON mu.user_id = ma.user_id
        WHERE
        ma.is_deleted = ${NOT_DELETED}
        AND ma.limit_id IN (
        SELECT
        mrl.limit_id
        FROM
        mt_relation_limit mrl
        WHERE
        is_deleted = 0
        AND `relation_status` IN (
        SELECT
        `status`
        FROM
        mt_user_relation
        WHERE
        ( SELECT `status` FROM `mt_user_relation` WHERE src_id = ma.user_id AND dest_id = #{userId} ) <![CDATA[ <> ]]> #{block}
        AND src_id = #{userId}
        AND dest_id = ma.user_id
        )
        OR ma.user_id = #{userId}
        )
        GROUP BY
        ma.article_id
        ORDER BY
        like_sum DESC
        LIMIT #{start}, #{end}
    </select>
</mapper>